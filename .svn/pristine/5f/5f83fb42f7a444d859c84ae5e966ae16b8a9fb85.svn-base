package com.xt.ptus.web.servlet;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.google.gson.Gson;
import com.qiniu.http.Response;
import com.xt.ptus.helper.QiNiuHelper;
import com.xt.ptus.mt.entity.MtMaterialResources;
import com.xt.ptus.mt.service.MtMaterialResourcesService;
import com.xt.ptus.obejcts.Result;
import com.xt.ptus.util.MD5Util;

public class QiNiuFileUploadServlet extends HttpServlet{
	
	private static Logger logger = Logger.getLogger(QiNiuFileUploadServlet.class);
	
	private MtMaterialResourcesService service;
	
	
	//七牛服务器配置相关属性
	private String ACCESS_KEY;
	
	private String SECRET_KEY;
	
	private String BUCKET_NAME;
	
	private String SERVER_URL;
	
	@Override
	public void init(){
		ApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(this.getServletContext());
		service = (MtMaterialResourcesService)ctx.getBean("mtMaterialResourcesServiceImpl");
		
		initializeParams();
	}

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		request.setCharacterEncoding("utf-8"); // 设置编码
		
		String catalogId = null;
		
		Result result = new Result();
		result.setSuccess(true);
		
		// 获得磁盘文件条目工厂
		DiskFileItemFactory factory = new DiskFileItemFactory();
		// 获取文件需要上传到的路径
		// String path = request.getRealPath("/upload1");
		InputStream is = this.getClass().getResourceAsStream("/system.properties");
		Properties prop = new Properties();
		prop.load(is);
		is.close();
		String path = prop.getProperty("file.upload");
		
		// 如果没以下两行设置的话，上传大的 文件 会占用 很多内存，
		// 设置暂时存放的 存储室 , 这个存储室，可以和 最终存储文件 的目录不同
		/**
		 * 原理 它是先存到 暂时存储室，然后在真正写到 对应目录的硬盘上， 按理来说 当上传一个文件时，其实是上传了两份，第一个是以 .tem
		 * 格式的 然后再将其真正写到 对应目录的硬盘上
		 */
		factory.setRepository(new File(path));
		// 设置 缓存的大小，当上传文件的容量超过该缓存时，直接放到 暂时存储室
		factory.setSizeThreshold(1024 * 1024);
		// 高水平的API文件上传处理
		ServletFileUpload upload = new ServletFileUpload(factory);
		try {
			QiNiuHelper fileHelper = new QiNiuHelper(ACCESS_KEY, SECRET_KEY, BUCKET_NAME);
			
			// 可以上传多个文件
			@SuppressWarnings("unchecked")
			List<FileItem> list = (List<FileItem>) upload.parseRequest(request);
			
			List<MtMaterialResources> resourcesList = new ArrayList<MtMaterialResources>();
			
			for(FileItem item : list){
				if(item.isFormField() && item.getFieldName().equals("catalogId")){
					catalogId = item.getString();
				}
			}
			
			for (FileItem item : list) {
				if(item.isFormField()){
					continue;
				}
				// 获取表单的属性名字
//				String name = item.getFieldName();
				// 对传入的非 简单的字符串进行处理 ，比如说二进制的 图片，电影这些
				/**
				 * 以下三步，主要获取 上传文件的名字
				 */
				// 获取路径名
				String value = item.getName();
				// 索引到最后一个反斜杠
				int start = value.lastIndexOf("\\");
				// 截取 上传文件的 字符串名字，加1是 去掉反斜杠，
				String fileName = value.substring(start + 1);

				MtMaterialResources resource = new MtMaterialResources();
				
				resource.setCatalogId(Integer.parseInt(catalogId));

				resource.setSrcFileName(fileName.substring(0, fileName.lastIndexOf(".")));
				resource.setSrcFileType(fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length()));
				
				resource.setNewFileName(MD5Util.MD5(String.valueOf(resource.hashCode())));
				resource.setNewFileType(fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length()));
				
				//TODO: getCurrentUser
				resource.setUploador(1);
				
				String newFileName = resource.getNewFileName() + "." + resource.getNewFileType();
				
				resource.setUploadTime(new Date());
				resource.setAccessUrl(SERVER_URL + newFileName);

				
				InputStream in = item.getInputStream();
				
				//上传七牛服务器
				Response res = fileHelper.uploadFile(in, newFileName);
				if(res.statusCode == 200){
					service.update(resource);
					resourcesList.add(resource);
				} else {
					throw new Exception("上传文件失败!");
				}
			}
			
			result.setData(resourcesList);
		} catch (FileUploadException e) {
			logger.error(e);
			result.setSuccess(false);
			result.setMessage("上传失败!");
			result.setError(e.getMessage());
		} catch (Exception e) {
			logger.error(e);
			result.setSuccess(false);
			result.setMessage("上传失败!");
			result.setError(e.getMessage());
		}
		
		response.setContentType("text/html;charset=utf-8");// 这行代码其实既通知浏览器用u8发送，又通知浏览器用u8打开
		// 但是为了方便观看，还是会写上下面这行代码
		response.setCharacterEncoding("utf-8");
		Gson son = new Gson();
		response.getWriter().write(son.toJson(result));
	}

	private void initializeParams() {
		InputStream in = this.getClass().getResourceAsStream("/system.properties");
		Properties prop = new Properties();
		try {
			
			prop.load(in);

			ACCESS_KEY = prop.getProperty("qiniu.access_key");
			SECRET_KEY = prop.getProperty("qiniu.secret_key");
			BUCKET_NAME = prop.getProperty("qiniu.bucketname");
			SERVER_URL = prop.getProperty("qiniu.server.url");
			
			in.close();
		} catch (IOException e) {
			logger.error(e);
		}
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}
}
