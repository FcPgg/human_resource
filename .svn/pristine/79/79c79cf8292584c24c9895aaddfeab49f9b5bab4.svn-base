package com.xt.ptus.mt.controller;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Property;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xt.ptus.base.BaseController;
import com.xt.ptus.constants.Constants;
import com.xt.ptus.mt.entity.MtOrderInfo;
import com.xt.ptus.mt.service.MtOrderInfoService;
import com.xt.ptus.obejcts.Result;
import com.xt.ptus.util.RequestUtil;

@Controller
@RequestMapping(value = "/mt/mtOrderInfo/")
public class MtOrderInfoController extends BaseController<MtOrderInfo> {
	
	private static Logger logger = Logger.getLogger(MtOrderGoodsController.class);
	
	@Resource
	private MtOrderInfoService service;
	
	@ResponseBody
	@RequestMapping("getComplexOrder")
	public Result getComplexOrder(HttpServletRequest request,@RequestParam(value="id", required = false) String id,@RequestParam(value = "sellerId" ,required=false)String sellerId){
		Result result = new Result();
		int page = 1;
		int rows = 10;
		try {
			page = Integer.parseInt(request.getParameter("page"));
			rows = Integer.parseInt(request.getParameter("rows"));
		} catch(Exception e ){
			logger.error("分页数据转换异常，使用默认页码:page = 1，行数:rows=10");
		}

		try {
			if(sellerId != null && id == null){
			Map<String, Object> params = RequestUtil.requestParamsToMap(request);
			DetachedCriteria dc = DetachedCriteria.forClass(MtOrderInfo.class);
			dc.add(Property.forName("sellerId").eq(Integer.parseInt(params.get("sellerId").toString())));
			dc.add(Property.forName("payStatus").eq(Constants.ORDER_PAY_STATUS_PAID));
			dc.addOrder(Order.desc("createTime"));
			
			result.setData(service.getWithPagination(dc, page, rows, "id"));
			}else{
				
			result.setData(service.getComplexOrder(id));//查询订单详情
			}
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setMessage("操作失败");
			result.setError(e.getMessage());
			logger.error(e);
		}
		return result;
		
	}
	
	/**
	 * 修改物流状态
	 */
	@ResponseBody
	@RequestMapping("streamStatusUpdata")
	public Result streamStatusUpdata(HttpServletRequest request,@RequestParam("orderId") String orderId , @RequestParam("streamCompanyNo") String streamCompanyNo , @RequestParam("trackingNo") String trackingNo,@RequestParam("userId")String userId){
		Result result = new Result();
		int streamStatus = Constants.ORDER_STREAM_STATUS_SHIPPED;
		try {
			result.setData(service.shippedOrder(orderId,streamCompanyNo,trackingNo,streamStatus,userId));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setMessage("操作失败");
			result.setError(e.getMessage());
			logger.error(e);
		}
		return result;
	}
	
}
