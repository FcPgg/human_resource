package com.xt.ptus.mt.controller.mobile;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.xt.ptus.constants.Constants;
import com.xt.ptus.mt.entity.MtOrderInfo;
import com.xt.ptus.mt.service.MtOrderInfoService;
import com.xt.ptus.mt.service.MtUserInfoService;
import com.xt.ptus.obejcts.Result;
import com.xt.ptus.util.RequestUtil;

/**
 * 移动端商品控制器
 * 
 * @author Administrator
 * 
 */
@Controller
@RequestMapping("/mt/mobile/mtOrderInfo/")
public class MtOrderInfoControllerMobile {

	private static Logger logger = Logger.getLogger(MtOrderInfoControllerMobile.class);

	@Resource
	private MtOrderInfoService service;

	@Resource
	private MtUserInfoService userService;

	/**
	 * 创建订单
	 * 
	 * @param orderList
	 * @return
	 */
	@ResponseBody
	@RequestMapping("createOrders")
	private Result doUpdate(@RequestParam("orderList") String orderList) {
		Result result = new Result();

		try {
			Gson gson = new Gson();

			List<MtOrderInfo> orders = gson.fromJson(orderList, new TypeToken<ArrayList<MtOrderInfo>>() {}.getType());
			if (orders != null) {
				String message = service.createOrders(orders);
				logger.debug("message : " + message);
				if (message == null) {

				}
				result.setData(orders);
			}
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 我的订单
	 * 
	 * @param userId
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("getOrderByUserId")
	private Result getOrderByUserId(@RequestParam("userId") String userId, HttpServletRequest request) {
		Result result = new Result();

		int page = 1;
		int rows = 10;
		try {
			page = Integer.parseInt(request.getParameter("page"));
			rows = Integer.parseInt(request.getParameter("rows"));
		} catch (Exception e) {
			logger.error("传递分页数据异常，使用默认分页数据");
		}

		Map<String, Object> params = RequestUtil.requestParamsToMap(request);

		try {

			result.setData(service.getOrderByUserId(userId, page, rows, params));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 订单详情
	 * 
	 * @param orderId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("getOrderDetail")
	private Result getOrderByDetail(@RequestParam("orderId") String orderId) {
		Result result = new Result();

		try {
			result.setData(service.getOrderDetail(orderId));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 批量获取订单
	 * 
	 * @param orderId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("getOrderByIds")
	private Result getOrderByIds(@RequestParam("orderIds") String orderIds) {
		Result result = new Result();

		try {
			String[] ids = (new Gson()).fromJson(orderIds, new TypeToken<String[]>() {
			}.getType());
			result.setData(service.getOrderByIds(ids));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 取消订单
	 * 
	 * @param orderId
	 * @param orderStatus
	 * @return
	 */
	@ResponseBody
	@RequestMapping("doCancel")
	private Result doCancel(@RequestParam("orderId") String orderId) {
		Result result = new Result();

		try {
			result.setData(service.orderStatusUpdate(orderId, Constants.ORDER_STATUS_CANCEL, 1));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 支付订单
	 * 
	 * @param orderId
	 * @param payStatus
	 * @return
	 */
	@ResponseBody
	@RequestMapping("orderPay")
	private Result orderPayStatusUpdate(@RequestParam("orderIds") String orderIds) {
		Result result = new Result();

		try {

			String[] ids = (new Gson()).fromJson(orderIds, new TypeToken<String[]>() {
			}.getType());

			List<MtOrderInfo> list = new ArrayList<MtOrderInfo>();
			if (ids != null && ids.length > 0) {
				for (String id : ids) {
					list.add(service.orderPayStatusUpdate(id, Constants.ORDER_PAY_STATUS_PAID, 1));
				}
			}

			result.setData(list);
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 余额支付订单
	 * 
	 * @param orderId
	 * @param payStatus
	 * @return
	 */
	@ResponseBody
	@RequestMapping("payOrderByUserAccount")
	private Result payOrderByUserAccount(@RequestParam("orderIds") String orderIds, @RequestParam("userId") String userId, @RequestParam("pwd") String pwd) {
		Result result = new Result();

		try {

			String[] ids = (new Gson()).fromJson(orderIds, new TypeToken<String[]>() {
			}.getType());
			if (userService.matchUserPwd(userId, pwd)) {
				result.setData(service.payOrderByAccount(ids, userId));
			} else {
				result.setData("支付失败: 密码错误！");
			}
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}
	
	/**
	 * e币支付（积分）
	 */

	@ResponseBody
	@RequestMapping("payOrderByIntegral")
	private Result payOrderByIntegral(@RequestParam("orderIds") String orderIds, @RequestParam("userId") String userId, @RequestParam("pwd") String pwd) {
		Result result = new Result();

		try {

			String[] ids = (new Gson()).fromJson(orderIds, new TypeToken<String[]>() {
			}.getType());
			if (userService.matchUserPwd(userId, pwd)) {
				result.setData(service.payOrderByIntegral(ids, userId));
			} else {
				result.setData("支付失败: 密码错误！");
			}
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}
	/**
	 * 确认收货
	 * @param goodsId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("confirmReceive")
	public Result confirmReceive(@RequestParam("orderId") String orderId, @RequestParam("userId") String userId) {
		Result result = new Result();

		try {
			service.userReceiveGoods(orderId, Integer.parseInt(userId));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
	}

	/**
	 * 订单列表（手机商家）
	 * 
	 * @param sellerId    
	 * @param page
	 * @param rows
	 */
	@ResponseBody
	@RequestMapping("getOrderListBySellerId")
	public Result getOrderListBySellerId(
			@RequestParam(value = "sellerId") String sellerId,
			@RequestParam("page")String page, 
			@RequestParam("rows") String rows){
		
		Result result = new Result();
 		int pager = 1;
		int limit = 10;
		try {
			pager = Integer.parseInt(page);
			limit = Integer.parseInt(rows);
		} catch (Exception e) {
			logger.error("分页数据转换异常，使用默认页码:page = 1，行数:rows=10");
		}

		try {
			result.setData(service.getOrderListBySellerId(sellerId,pager,limit));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setMessage("操作失败");
			result.setError(e.getMessage());
			logger.error(e);
		}
		return result;

	}
	
	/**
	 * 获取订单详情（商家手机）
	 * @param orderId
	 */
    @ResponseBody
    @RequestMapping("getOrderInfoByUserId")
    public Result getOrderInfo(@RequestParam("userId")String userId,
    		@RequestParam("page")String page, 
    		@RequestParam("rows")String rows,
    		HttpServletRequest request){
    	Result result = new Result();
    	
    	int pager = 1;
		int limit = 10;
		try {
			pager = Integer.parseInt(page);
			limit = Integer.parseInt(rows);
		} catch (Exception e) {
			logger.error("分页数据转换异常，使用默认页码:page = 1，行数:rows=10");
		}
		
		Map<String, Object> params = RequestUtil.requestParamsToMap(request);
		
		try {
			result.setData(service.getOrderBySellerUserId(userId, pager, limit, params));//查询商家端订单
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setError(e.getMessage());
			result.setMessage("操作失败");
			logger.error(e);
		}
		return result;
    }
    
	
	/**
	 * 发货(手机商户)
	 * 
	 * @param orderId
	 * @param sellerId
	 * @param streamCompanyNo
	 *            物流公司中文名称
	 * @param trackingNo
	 *            物流编号
	 */
	@ResponseBody
	@RequestMapping("shippedOrder")
	public Result shippedOrder(@RequestParam("orderId") String orderId, 
			@RequestParam("userId") String userId,
			@RequestParam("streamCompanyNo") String streamCompanyNo, 
			@RequestParam("trackingNo") String trackingNo) {
		Result result = new Result();
		int streamStatus = Constants.ORDER_STREAM_STATUS_SHIPPED;
		try {
			result.setData(service.shippedOrder(orderId, streamCompanyNo, trackingNo, streamStatus, userId));
			result.setSuccess(true);
		} catch (Exception e) {
			result.setSuccess(false);
			result.setMessage("操作失败");
			result.setError(e.getMessage());
			logger.error(e);
		}
		return result;
	}

}
